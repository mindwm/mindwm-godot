extends Resource
class_name Clipboard

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Clipboard Model


# Required: True
# isArray: false
@export var context: ClipboardContext:
	set(value):
		__context__was__set = true
		context = value
var __context__was__set := false

# Type of clipboard
# Required: True
# isArray: false
# Allowed values: "Primary", "Secondary", "Clipboard"
@export var clipboardType: String = "":
	set(value):
		if str(value) != "" and not (str(value) in __clipboardType__allowable__values):
			push_error("Clipboard: tried to set property `clipboardType` to a value that is not allowed." +
				"  Allowed values: `Primary`, `Secondary`, `Clipboard`")
			return
		__clipboardType__was__set = true
		clipboardType = value
var __clipboardType__was__set := false
var __clipboardType__allowable__values := ["Primary", "Secondary", "Clipboard"]

# Clipboard content
# Required: True
# isArray: false
@export var content: String = "":
	set(value):
		__content__was__set = true
		content = value
var __content__was__set := false

# Required: False
# isArray: false
@export var selectionStart: Vector2int:
	set(value):
		__selectionStart__was__set = true
		selectionStart = value
var __selectionStart__was__set := false

# Required: False
# isArray: false
@export var selectionEnd: Vector2int:
	set(value):
		__selectionEnd__was__set = true
		selectionEnd = value
var __selectionEnd__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__context__was__set:
		bzz_missing_properties.append("context")
	if not self.__clipboardType__was__set:
		bzz_missing_properties.append("clipboardType")
	if not self.__content__was__set:
		bzz_missing_properties.append("content")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__context__was__set:
		bzz_dictionary["context"] = self.context
	if self.__clipboardType__was__set:
		bzz_dictionary["clipboardType"] = self.clipboardType
	if self.__content__was__set:
		bzz_dictionary["content"] = self.content
	if self.__selectionStart__was__set:
		bzz_dictionary["selectionStart"] = self.selectionStart
	if self.__selectionEnd__was__set:
		bzz_dictionary["selectionEnd"] = self.selectionEnd
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("context"):
		me.context = ClipboardContext.bzz_denormalize_single(from_dict["context"])
	if from_dict.has("clipboardType"):
		me.clipboardType = from_dict["clipboardType"]
	if from_dict.has("content"):
		me.content = from_dict["content"]
	if from_dict.has("selectionStart"):
		me.selectionStart = Vector2int.bzz_denormalize_single(from_dict["selectionStart"])
	if from_dict.has("selectionEnd"):
		me.selectionEnd = Vector2int.bzz_denormalize_single(from_dict["selectionEnd"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

