extends Resource
class_name Neo4jChangeDataCapture

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Neo4jChangeDataCapture Model


# Required: True
# isArray: false
@export var headers: Dictionary:
	set(value):
		__headers__was__set = true
		headers = value
var __headers__was__set := false

# Required: True
# isArray: false
@export var messageUnderscorekey: String = "":
	set(value):
		__messageUnderscorekey__was__set = true
		messageUnderscorekey = value
var __messageUnderscorekey__was__set := false

# Required: True
# isArray: false
@export var meta: Neo4jChangeDataCaptureMeta:
	set(value):
		__meta__was__set = true
		meta = value
var __meta__was__set := false

# Required: True
# isArray: false
@export var offset: int:
	set(value):
		__offset__was__set = true
		offset = value
var __offset__was__set := false

# Required: True
# isArray: false
@export var partition: int:
	set(value):
		__partition__was__set = true
		partition = value
var __partition__was__set := false

# Required: True
# isArray: false
@export var sourceUnderscoretype: String = "":
	set(value):
		__sourceUnderscoretype__was__set = true
		sourceUnderscoretype = value
var __sourceUnderscoretype__was__set := false

#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: True
# isArray: false
@export var timestamp: String:
	set(value):
		__timestamp__was__set = true
		timestamp = value
var __timestamp__was__set := false

# Required: True
# isArray: false
@export var topic: String = "":
	set(value):
		__topic__was__set = true
		topic = value
var __topic__was__set := false

# Required: True
# isArray: false
@export var schema: Neo4jChangeDataCaptureSchema:
	set(value):
		__schema__was__set = true
		schema = value
var __schema__was__set := false

# Required: True
# isArray: false
@export var payload: Neo4jChangeDataCapturePayload:
	set(value):
		__payload__was__set = true
		payload = value
var __payload__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__headers__was__set:
		bzz_missing_properties.append("headers")
	if not self.__messageUnderscorekey__was__set:
		bzz_missing_properties.append("messageUnderscorekey")
	if not self.__meta__was__set:
		bzz_missing_properties.append("meta")
	if not self.__offset__was__set:
		bzz_missing_properties.append("offset")
	if not self.__partition__was__set:
		bzz_missing_properties.append("partition")
	if not self.__sourceUnderscoretype__was__set:
		bzz_missing_properties.append("sourceUnderscoretype")
	if not self.__timestamp__was__set:
		bzz_missing_properties.append("timestamp")
	if not self.__topic__was__set:
		bzz_missing_properties.append("topic")
	if not self.__schema__was__set:
		bzz_missing_properties.append("schema")
	if not self.__payload__was__set:
		bzz_missing_properties.append("payload")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__headers__was__set:
		bzz_dictionary["headers"] = self.headers
	if self.__messageUnderscorekey__was__set:
		bzz_dictionary["messageUnderscorekey"] = self.messageUnderscorekey
	if self.__meta__was__set:
		bzz_dictionary["meta"] = self.meta
	if self.__offset__was__set:
		bzz_dictionary["offset"] = self.offset
	if self.__partition__was__set:
		bzz_dictionary["partition"] = self.partition
	if self.__sourceUnderscoretype__was__set:
		bzz_dictionary["sourceUnderscoretype"] = self.sourceUnderscoretype
	if self.__timestamp__was__set:
		bzz_dictionary["timestamp"] = self.timestamp
	if self.__topic__was__set:
		bzz_dictionary["topic"] = self.topic
	if self.__schema__was__set:
		bzz_dictionary["schema"] = self.schema
	if self.__payload__was__set:
		bzz_dictionary["payload"] = self.payload
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("headers"):
		me.headers = from_dict["headers"]
	if from_dict.has("messageUnderscorekey"):
		me.messageUnderscorekey = from_dict["messageUnderscorekey"]
	if from_dict.has("meta"):
		me.meta = Neo4jChangeDataCapture_meta.bzz_denormalize_single(from_dict["meta"])
	if from_dict.has("offset"):
		me.offset = from_dict["offset"]
	if from_dict.has("partition"):
		me.partition = from_dict["partition"]
	if from_dict.has("sourceUnderscoretype"):
		me.sourceUnderscoretype = from_dict["sourceUnderscoretype"]
	if from_dict.has("timestamp"):
		me.timestamp = from_dict["timestamp"]
	if from_dict.has("topic"):
		me.topic = from_dict["topic"]
	if from_dict.has("schema"):
		me.schema = Neo4jChangeDataCapture_schema.bzz_denormalize_single(from_dict["schema"])
	if from_dict.has("payload"):
		me.payload = Neo4jChangeDataCapture_payload.bzz_denormalize_single(from_dict["payload"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

