extends Resource
class_name Neo4jChangeDataCaptureMeta

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Neo4jChangeDataCaptureMeta Model


# Required: True
# isArray: false
@export var operation: String = "":
	set(value):
		__operation__was__set = true
		operation = value
var __operation__was__set := false

# Required: True
# isArray: false
@export var source: Neo4jChangeDataCaptureMetaSource:
	set(value):
		__source__was__set = true
		source = value
var __source__was__set := false

# Required: True
# isArray: false
@export var timestamp: int:
	set(value):
		__timestamp__was__set = true
		timestamp = value
var __timestamp__was__set := false

# Required: True
# isArray: false
@export var txEventId: int:
	set(value):
		__txEventId__was__set = true
		txEventId = value
var __txEventId__was__set := false

# Required: True
# isArray: false
@export var txEventsCount: int:
	set(value):
		__txEventsCount__was__set = true
		txEventsCount = value
var __txEventsCount__was__set := false

# Required: True
# isArray: false
@export var txId: int:
	set(value):
		__txId__was__set = true
		txId = value
var __txId__was__set := false

# Required: True
# isArray: false
@export var username: String = "":
	set(value):
		__username__was__set = true
		username = value
var __username__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__operation__was__set:
		bzz_missing_properties.append("operation")
	if not self.__source__was__set:
		bzz_missing_properties.append("source")
	if not self.__timestamp__was__set:
		bzz_missing_properties.append("timestamp")
	if not self.__txEventId__was__set:
		bzz_missing_properties.append("txEventId")
	if not self.__txEventsCount__was__set:
		bzz_missing_properties.append("txEventsCount")
	if not self.__txId__was__set:
		bzz_missing_properties.append("txId")
	if not self.__username__was__set:
		bzz_missing_properties.append("username")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__operation__was__set:
		bzz_dictionary["operation"] = self.operation
	if self.__source__was__set:
		bzz_dictionary["source"] = self.source
	if self.__timestamp__was__set:
		bzz_dictionary["timestamp"] = self.timestamp
	if self.__txEventId__was__set:
		bzz_dictionary["txEventId"] = self.txEventId
	if self.__txEventsCount__was__set:
		bzz_dictionary["txEventsCount"] = self.txEventsCount
	if self.__txId__was__set:
		bzz_dictionary["txId"] = self.txId
	if self.__username__was__set:
		bzz_dictionary["username"] = self.username
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("operation"):
		me.operation = from_dict["operation"]
	if from_dict.has("source"):
		me.source = Neo4jChangeDataCapture_meta_source.bzz_denormalize_single(from_dict["source"])
	if from_dict.has("timestamp"):
		me.timestamp = from_dict["timestamp"]
	if from_dict.has("txEventId"):
		me.txEventId = from_dict["txEventId"]
	if from_dict.has("txEventsCount"):
		me.txEventsCount = from_dict["txEventsCount"]
	if from_dict.has("txId"):
		me.txId = from_dict["txId"]
	if from_dict.has("username"):
		me.username = from_dict["username"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

